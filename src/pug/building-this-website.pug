extends partials/_layout

block prepend head
  - var pageTitle = 'How I Built This Website | Daniel Dafoe | Front-End Accessibility Engineer';
  - var pageDescription = 'Sharing the tools and decisions I made when creating this personal website.';

block main
  h1 How I Built This Website

  p.intro Sharing the decisions I made and the tools I used to create this website.

  p The design and code are handcrafted by me. I use Figma as my design tool of choice; I use Visual Studio Code as my editor.

  p Like any web engineer, I like to use my personal website as a way to experiment and learn. Over the years, I've redesigned it numerous times. I've built it in Angular and React, and used static site generators like Jekyll.

  h2 Tech Stack

  p For the local development process, I use #[a(href='https://parceljs.org') Parcel]. The front-end code is written in #[a(href='https://pugjs.org') Pug] and #[a(href='https://sass-lang.com') Sass]. The (minimal) JavaScript is pure vanilla JavaScript. The website itself is hosted on #[a(href='https://netflify.com') Netlify].

  h2 Deployment Process

  p The deployment process kicks off with me pushing changes to GitHub. A build then gets triggered on Netlify.

  p I have 2 plugins enabled for my site: one for checking the accessibility of my pages in case I missed anything silly, and another for checking that I don't have any dead links.

  h3 Main Branch

  p For new commits on my main branch, a production build is triggered. This runs a build script in my package.json that turns my pre-compiled code into compiled code that I can serve in the browser.

  h3 Feature Branches

  p For feature branches, I configured Netlify to spin up a non-production deployment so I can test my changes. This runs the same build script in my package.json as for the #[code main] branch.

  h2 Considerations

  h3 Framework vs. Frameworkless

  p Although I've built the site with a JavaScript framework before, sometimes I like to go back to simpler ways of creating websites.

  p Since this iteration of my personal site has very little functionality, I decided to stick to an HTML templating language instead of inflating my bundle size with a framework. The templating language compiles into pure HTML, so there's no increase in the HTML sent to the client.

  h3 CSS vs. Sass

  p Although I could have gone with pure CSS for styling, I still opted for Sass. The convenience of nesting styles and creating mixins still edged out CSS. It's not all about variables, after all. In terms of bundle size, Sass doesn't—though it can—increase the size of the CSS delivered to the browser.

  h3 JavaScript vs. TypeScript

  p Since I knew I'd write pretty minimal JavaScript, this was an easier decision. I decided to stick with vanilla JS since there was really no reason to take advantage of types or interfaces.

  include partials/_go-home